{"is_source_file": true, "format": "JavaScript", "description": "This file defines an API client module for interacting with a Django backend via REST endpoints. It includes functions for user authentication (register, login, logout), and chat interactions (asking questions, listing conversations, getting conversation details). It manages authentication via tokens stored in localStorage and handles HTTP responses appropriately.", "external_files": ["<fetch API>", "localStorage"], "external_methods": ["fetch()", "localStorage.getItem()", "localStorage.setItem()", "localStorage.removeItem()"], "published": ["apiRegister", "apiLogin", "apiLogout", "apiAskQuestion", "apiListConversations", "apiGetConversationDetail"], "classes": [], "methods": [{"name": "defaultHeaders", "description": "Generates request headers, including Authorization if a token exists in localStorage."}, {"name": "handleResponse(res)", "description": "Handles the fetch response, parsing JSON or text based on content type, and throws an error if the response is not OK.", "scope": "", "scopeKind": ""}, {"name": "apiRegister({ username, email, password })", "description": "Sends a POST request to register a new user with username, email, and password.", "scope": "", "scopeKind": ""}, {"name": "apiLogin({ username, password })", "description": "Performs login with username and password, stores token in localStorage if provided.", "scope": "", "scopeKind": ""}, {"name": "apiLogout()", "description": "Logs out the current user and clears authentication data from localStorage.", "scope": "", "scopeKind": ""}, {"name": "apiAskQuestion({ question, conversation_id })", "description": "Sends a question (with optional conversation ID) to the chat endpoint.", "scope": "", "scopeKind": ""}, {"name": "apiListConversations()", "description": "Retrieves the list of user's conversations.", "scope": "", "scopeKind": ""}, {"name": "apiGetConversationDetail(conversation_id)", "description": "Fetches details for a specific conversation by ID.", "scope": "", "scopeKind": ""}], "calls": ["fetch()", "localStorage.getItem(\"authToken\")", "localStorage.setItem(\"authToken\", data.token)", "localStorage.setItem(\"authUser\", JSON.stringify({ username }))", "localStorage.removeItem(\"authToken\")", "localStorage.removeItem(\"authUser\")"], "search-terms": ["apiClient", "REST API", "authentication", "chat", "conversation", "authToken"], "state": 2, "file_id": 14, "knowledge_revision": 29, "git_revision": "", "ctags": [{"_type": "tag", "name": "API_BASE_URL", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http:\\/\\/localhost:8000\\/api\";$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "Content-Type", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^    \"Content-Type\": \"application\\/json\"$/", "language": "JavaScript", "kind": "property", "scope": "headers", "scopeKind": "class"}, {"_type": "tag", "name": "apiAskQuestion", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^export async function apiAskQuestion({ question, conversation_id }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ question, conversation_id })"}, {"_type": "tag", "name": "apiGetConversationDetail", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^export async function apiGetConversationDetail(conversation_id) {$/", "language": "JavaScript", "kind": "function", "signature": "(conversation_id)"}, {"_type": "tag", "name": "apiListConversations", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^export async function apiListConversations() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "apiLogin", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^export async function apiLogin({ username, password }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ username, password })"}, {"_type": "tag", "name": "apiLogout", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^export async function apiLogout() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "apiRegister", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^export async function apiRegister({ username, email, password }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ username, email, password })"}, {"_type": "tag", "name": "defaultHeaders", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^const defaultHeaders = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "handleResponse", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^async function handleResponse(res) {$/", "language": "JavaScript", "kind": "function", "signature": "(res)"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^  const headers = {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/ai-qa-chatbot-platform-2765-2774/qna_frontend/src/services/api.js", "pattern": "/^  const token = localStorage.getItem(\"authToken\");$/", "language": "JavaScript", "kind": "constant"}], "hash": "951703d46a4b96b54ba9e439720495a3", "format-version": 4, "code-base-name": "qna_frontend", "filename": "qna_frontend/src/services/api.js", "fields": [{"name": "\"Content-Type\": \"application\\/json\"", "scope": "headers", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"29": ""}]}